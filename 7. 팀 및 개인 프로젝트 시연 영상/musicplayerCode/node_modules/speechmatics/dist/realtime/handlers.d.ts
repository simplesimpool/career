/**
 * Speech service main api class
 */
import {
  ModelError,
  Warning,
  AddTranscript,
  AddPartialTranscript,
  AddTranslation,
  AddPartialTranslation,
  Info,
  RecognitionStarted,
  ISocketWrapper,
  SessionConfig,
  AudioEventEnded,
  AudioEventStarted,
} from '../types';
export declare const defaultLanguage = 'en';
export declare class RealtimeSocketHandler {
  private socketWrap;
  private seqNoIn;
  private startRecognitionResolve?;
  private stopRecognitionResolve?;
  private rejectPromise?;
  private pendingDisconnect;
  private sub;
  constructor(sub: Subscriber, socketWrapImplementation: ISocketWrapper);
  connect(
    runtimeURL: string,
    runtimeKey?: string,
    appId?: string,
  ): Promise<void>;
  disconnect(): Promise<void>;
  isConnected(): boolean;
  sendAudioBuffer(data: Blob | ArrayBufferLike): void;
  startRecognition(config?: SessionConfig): Promise<RecognitionStarted>;
  sendStopRecognition(): void;
  stopRecognition(): Promise<void>;
  private onSocketMessage;
  private onSocketDisconnect;
  private onSocketOpen;
  private onSocketError;
}
export type Subscriber = {
  onRecognitionStart?: (data: RecognitionStarted) => void;
  onRecognitionEnd?: () => void;
  onFullReceived?: (data: AddTranscript) => void;
  onPartialReceived?: (data: AddPartialTranscript) => void;
  onFullTranslationReceived?: (result: AddTranslation) => void;
  onPartialTranslationReceived?: (data: AddPartialTranslation) => void;
  onWarning?: (data: Warning) => void;
  onError?: (data: ModelError) => void;
  onInfo?: (data: Info) => void;
  onDisconnect?: () => void;
  onAudioEventStartedReceived?: (data: AudioEventStarted) => void;
  onAudioEventEndedReceived?: (data: AudioEventEnded) => void;
};
