"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var client_exports = {};
__export(client_exports, {
  Speechmatics: () => Speechmatics
});
module.exports = __toCommonJS(client_exports);
var import_client = require("./realtime/client");
var import_connection = require("./config/connection");
var import_batch = require("./batch");
class Speechmatics {
  constructor(config) {
    this._batch = null;
    this._connectionConfig = new import_connection.ConnectionConfigFull(config);
  }
  get batch() {
    if (this._batch === null) {
      this._batch = new import_batch.BatchTranscription(this._connectionConfig);
    }
    return this._batch;
  }
  realtime(config) {
    let conf = {};
    if (typeof config === "string") {
      conf = { apiKey: config };
    } else if (typeof config === "object") {
      conf = config;
    }
    return new import_client.RealtimeSession({ ...this._connectionConfig, ...conf || {} });
  }
}
globalThis.Speechmatics = Speechmatics;
//# sourceMappingURL=client.js.map
