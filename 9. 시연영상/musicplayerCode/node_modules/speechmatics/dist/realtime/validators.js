"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var validators_exports = {};
__export(validators_exports, {
  validateOptions: () => validateOptions
});
module.exports = __toCommonJS(validators_exports);
var import_zod = __toESM(require("zod"));
var import_types = require("../types");
const TranscriptionConfigSchema = import_zod.default.object({
  language: import_zod.default.string(),
  domain: import_zod.default.string().optional(),
  output_locale: import_zod.default.string().optional(),
  operating_point: import_zod.default.enum(Object.values(import_types.OperatingPoint)).optional(),
  // Replace with the Zod schema for `OperatingPoint`
  enable_partials: import_zod.default.boolean().optional(),
  additional_vocab: import_zod.default.array(
    import_zod.default.union([
      import_zod.default.string(),
      import_zod.default.object({ content: import_zod.default.string(), sounds_like: import_zod.default.array(import_zod.default.string()) })
    ])
  ).optional(),
  punctuation_overrides: import_zod.default.object({
    sensitivity: import_zod.default.number().min(0).max(1).optional(),
    permitted_marks: import_zod.default.array(import_zod.default.string()).optional()
  }).optional(),
  diarization: import_zod.default.enum(Object.values(import_types.RealtimeDiarizationConfig)).optional(),
  speaker_change_sensitivity: import_zod.default.number().min(0).max(1).optional(),
  enable_entities: import_zod.default.boolean().optional(),
  max_delay: import_zod.default.number().min(2).max(10).optional(),
  max_delay_mode: import_zod.default.enum(Object.values(import_types.MaxDelayModeConfig)).optional(),
  speaker_diarization_config: import_zod.default.object({
    max_speakers: import_zod.default.number().min(2).max(20).optional()
  }).optional()
  // Replace with the Zod schema for `TranscriptionConfigSpeakerDiarizationConfig`
});
function validateOptions(options) {
  const result = TranscriptionConfigSchema.safeParse(options);
  if (result.success) {
    return null;
  } else {
    return result.error.toString();
  }
}
//# sourceMappingURL=validators.js.map
