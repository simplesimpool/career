import { ISocketWrapper } from '../types';
import { ModelError, RealtimeMessage } from '../types';
/**
 * Wraps the socket api to be more useful in async/await kind of scenarios
 */
export declare class NodeWebSocketWrapper implements ISocketWrapper {
  private socket?;
  private connectResolve?;
  private connectReject?;
  private disconnectResolve?;
  onDisconnect?: () => void;
  onOpen?: () => void;
  onMessage?: (data: RealtimeMessage) => void;
  onError?: (event: ModelError) => void;
  constructor();
  connect(
    runtimeURL: string,
    authToken?: string,
    appId?: string,
  ): Promise<void>;
  disconnect(): Promise<void>;
  sendAudioBuffer(data: ArrayBufferLike | Blob): void;
  sendMessage(message: string): void;
  isOpen(): boolean;
  private handleSocketOpen;
  private handleSocketError;
  private handleSocketClose;
  private handleSocketMessage;
}
