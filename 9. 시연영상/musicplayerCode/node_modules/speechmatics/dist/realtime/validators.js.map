{
  "version": 3,
  "sources": ["../../src/realtime/validators.ts"],
  "sourcesContent": ["import z from 'zod';\n\nimport {\n  RealtimeTranscriptionConfig,\n  OperatingPoint,\n  RealtimeDiarizationConfig,\n  MaxDelayModeConfig,\n} from '../types';\n\ntype AcceptableEnumValues = [string, ...string[]];\n\nconst TranscriptionConfigSchema = z.object({\n  language: z.string(),\n  domain: z.string().optional(),\n  output_locale: z.string().optional(),\n  operating_point: z\n    .enum(Object.values(OperatingPoint) as AcceptableEnumValues)\n    .optional(), // Replace with the Zod schema for `OperatingPoint`\n  enable_partials: z.boolean().optional(),\n  additional_vocab: z\n    .array(\n      z.union([\n        z.string(),\n        z.object({ content: z.string(), sounds_like: z.array(z.string()) }),\n      ]),\n    )\n    .optional(),\n  punctuation_overrides: z\n    .object({\n      sensitivity: z.number().min(0).max(1).optional(),\n      permitted_marks: z.array(z.string()).optional(),\n    })\n    .optional(),\n  diarization: z\n    .enum(Object.values(RealtimeDiarizationConfig) as AcceptableEnumValues)\n    .optional(),\n  speaker_change_sensitivity: z.number().min(0).max(1).optional(),\n  enable_entities: z.boolean().optional(),\n  max_delay: z.number().min(2).max(10).optional(),\n  max_delay_mode: z\n    .enum(Object.values(MaxDelayModeConfig) as AcceptableEnumValues)\n    .optional(),\n  speaker_diarization_config: z\n    .object({\n      max_speakers: z.number().min(2).max(20).optional(),\n    })\n    .optional(), // Replace with the Zod schema for `TranscriptionConfigSpeakerDiarizationConfig`\n});\n\nexport function validateOptions(\n  options: RealtimeTranscriptionConfig,\n): null | string {\n  const result = TranscriptionConfigSchema.safeParse(options);\n\n  if (result.success) {\n    return null;\n  } else {\n    // Data is invalid\n    return result.error.toString(); // ZodError type\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAc;AAEd,mBAKO;AAIP,MAAM,4BAA4B,WAAAA,QAAE,OAAO;AAAA,EACzC,UAAU,WAAAA,QAAE,OAAO;AAAA,EACnB,QAAQ,WAAAA,QAAE,OAAO,EAAE,SAAS;AAAA,EAC5B,eAAe,WAAAA,QAAE,OAAO,EAAE,SAAS;AAAA,EACnC,iBAAiB,WAAAA,QACd,KAAK,OAAO,OAAO,2BAAc,CAAyB,EAC1D,SAAS;AAAA;AAAA,EACZ,iBAAiB,WAAAA,QAAE,QAAQ,EAAE,SAAS;AAAA,EACtC,kBAAkB,WAAAA,QACf;AAAA,IACC,WAAAA,QAAE,MAAM;AAAA,MACN,WAAAA,QAAE,OAAO;AAAA,MACT,WAAAA,QAAE,OAAO,EAAE,SAAS,WAAAA,QAAE,OAAO,GAAG,aAAa,WAAAA,QAAE,MAAM,WAAAA,QAAE,OAAO,CAAC,EAAE,CAAC;AAAA,IACpE,CAAC;AAAA,EACH,EACC,SAAS;AAAA,EACZ,uBAAuB,WAAAA,QACpB,OAAO;AAAA,IACN,aAAa,WAAAA,QAAE,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,SAAS;AAAA,IAC/C,iBAAiB,WAAAA,QAAE,MAAM,WAAAA,QAAE,OAAO,CAAC,EAAE,SAAS;AAAA,EAChD,CAAC,EACA,SAAS;AAAA,EACZ,aAAa,WAAAA,QACV,KAAK,OAAO,OAAO,sCAAyB,CAAyB,EACrE,SAAS;AAAA,EACZ,4BAA4B,WAAAA,QAAE,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,SAAS;AAAA,EAC9D,iBAAiB,WAAAA,QAAE,QAAQ,EAAE,SAAS;AAAA,EACtC,WAAW,WAAAA,QAAE,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,SAAS;AAAA,EAC9C,gBAAgB,WAAAA,QACb,KAAK,OAAO,OAAO,+BAAkB,CAAyB,EAC9D,SAAS;AAAA,EACZ,4BAA4B,WAAAA,QACzB,OAAO;AAAA,IACN,cAAc,WAAAA,QAAE,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,SAAS;AAAA,EACnD,CAAC,EACA,SAAS;AAAA;AACd,CAAC;AAEM,SAAS,gBACd,SACe;AACf,QAAM,SAAS,0BAA0B,UAAU,OAAO;AAE1D,MAAI,OAAO,SAAS;AAClB,WAAO;AAAA,EACT,OAAO;AAEL,WAAO,OAAO,MAAM,SAAS;AAAA,EAC/B;AACF;",
  "names": ["z"]
}
