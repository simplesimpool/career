"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var client_exports = {};
__export(client_exports, {
  BatchTranscription: () => BatchTranscription
});
module.exports = __toCommonJS(client_exports);
var import_connection = require("../config/connection");
var import_request = require("../utils/request");
var import_poll = __toESM(require("../utils/poll"));
var import_errors = require("../utils/errors");
class BatchTranscription {
  constructor(config) {
    this._apiKey = void 0;
    this.config = new import_connection.ConnectionConfigFull(config);
  }
  get apiKey() {
    return this._apiKey ?? (typeof this.config.apiKey === "string" ? this.config.apiKey : void 0);
  }
  async refreshApiKey() {
    if (typeof this.config.apiKey === "string")
      return this.config.apiKey;
    const newKey = await this.config.apiKey();
    this._apiKey = newKey;
    return newKey;
  }
  async refreshOnAuthFail(doRequest) {
    try {
      return await doRequest(this.apiKey ?? await this.refreshApiKey());
    } catch (e) {
      if (e instanceof import_errors.SpeechmaticsResponseError && e.response.code === 401) {
        return await doRequest(await this.refreshApiKey());
      } else {
        throw e;
      }
    }
  }
  async get(endpoint, contentType, queryParams) {
    return await this.refreshOnAuthFail(
      (key) => (0, import_request.request)(
        key,
        this.config.batchUrl,
        endpoint,
        "GET",
        null,
        { ...queryParams, [import_request.SM_APP_PARAM_NAME]: this.config.appId },
        contentType
      )
    );
  }
  async post(endpoint, body = null, contentType) {
    return await this.refreshOnAuthFail(
      (key) => (0, import_request.request)(
        key,
        this.config.batchUrl,
        endpoint,
        "POST",
        body,
        { [import_request.SM_APP_PARAM_NAME]: this.config.appId },
        contentType
      )
    );
  }
  async delete(endpoint, params) {
    return this.refreshOnAuthFail(
      (key) => (0, import_request.request)(key, this.config.batchUrl, endpoint, "DELETE", null, {
        ...params,
        [import_request.SM_APP_PARAM_NAME]: this.config.appId
      })
    );
  }
  /**
   * The main method for transcribing audio files. It takes a url or a buffer and returns a promise with a transcript.
   *
   *
   * @param config TranscribeConfig
   * @returns Promise<RetrieveTranscriptResponse>. A promise that resolves to a transcript.
   */
  async transcribe(input, jobConfig, format) {
    if (this.config.apiKey === void 0)
      throw new import_errors.SpeechmaticsConfigurationError(
        "Missing apiKey in configuration"
      );
    const submitResponse = await this.createTranscriptionJob(input, jobConfig);
    if (submitResponse === null || submitResponse === void 0) {
      throw "Error: submitResponse is undefined";
    }
    await (0, import_poll.default)(
      async () => {
        const { job } = await this.getJob(submitResponse.id);
        if (job.status === "rejected") {
          throw job.errors;
        } else if (job.status === "done") {
          return true;
        } else {
          return false;
        }
      },
      3e3,
      // repeat every 3 seconds
      15 * 60 * 1e3
      // 15 minutes timeout
    );
    return await this.getJobResult(submitResponse.id, format);
  }
  async createTranscriptionJob(input, jobConfig) {
    if (this.config.apiKey === void 0)
      throw new import_errors.SpeechmaticsConfigurationError(
        "Missing apiKey in configuration"
      );
    const config = {
      ...jobConfig,
      type: "transcription"
    };
    const formData = new FormData();
    if ("url" in input) {
      config.fetch_data = input;
    } else if ("data" in input) {
      formData.append("data_file", input.data, input.fileName);
    } else {
      formData.append("data_file", input);
    }
    formData.append("config", JSON.stringify(config));
    return this.post("/v2/jobs", formData);
  }
  async listJobs(filters = {}) {
    if (this.config.apiKey === void 0)
      throw new import_errors.SpeechmaticsConfigurationError(
        "Missing apiKey in configuration"
      );
    return this.get("/v2/jobs", "application/json", { ...filters });
  }
  async getJob(id) {
    if (this.config.apiKey === void 0)
      throw new import_errors.SpeechmaticsConfigurationError(
        "Missing apiKey in configuration"
      );
    return this.get(`/v2/jobs/${id}`, "application/json");
  }
  async deleteJob(id, force = false) {
    if (this.config.apiKey === void 0)
      throw new import_errors.SpeechmaticsConfigurationError(
        "Missing apiKey in configuration"
      );
    const params = force ? { force } : void 0;
    return this.delete(`/v2/jobs/${id}`, params);
  }
  async getJobResult(jobId, format = "json-v2") {
    if (this.config.apiKey === void 0)
      throw new import_errors.SpeechmaticsConfigurationError(
        "Missing apiKey in configuration"
      );
    const params = { format: format === "text" ? "txt" : format };
    const contentType = format === "json-v2" ? "application/json" : "text/plain";
    return this.get(`/v2/jobs/${jobId}/transcript`, contentType, params);
  }
  async getDataFile(jobId) {
    if (this.config.apiKey === void 0)
      throw new import_errors.SpeechmaticsConfigurationError(
        "Missing apiKey in configuration"
      );
    return this.get(`/v2/jobs/${jobId}/data`, "application/json");
  }
  async getFeatureDiscovery() {
    return this.get("/v1/discovery/features");
  }
}
//# sourceMappingURL=client.js.map
