"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var errors_exports = {};
__export(errors_exports, {
  InternalErrorEnum: () => InternalErrorEnum,
  SpeechmaticsConfigurationError: () => SpeechmaticsConfigurationError,
  SpeechmaticsInvalidTypeError: () => SpeechmaticsInvalidTypeError,
  SpeechmaticsNetworkError: () => SpeechmaticsNetworkError,
  SpeechmaticsResponseError: () => SpeechmaticsResponseError,
  SpeechmaticsUnexpectedMessage: () => SpeechmaticsUnexpectedMessage,
  SpeechmaticsUnexpectedResponse: () => SpeechmaticsUnexpectedResponse,
  SpeechmaticsUnsupportedEnvironment: () => SpeechmaticsUnsupportedEnvironment
});
module.exports = __toCommonJS(errors_exports);
var import_zod = __toESM(require("zod"));
var import_types = require("../types");
const ErrorResponseSchema = import_zod.default.object({
  code: import_zod.default.number(),
  detail: import_zod.default.optional(import_zod.default.string()),
  error: import_zod.default.nativeEnum(import_types.ErrorResponseErrorEnum)
});
class SpeechmaticsResponseError extends Error {
  constructor(errorResponse) {
    var __super = (...args) => {
      super(...args);
    };
    const parse = ErrorResponseSchema.safeParse(errorResponse);
    if (parse.success) {
      __super(parse.data.error);
      this.response = parse.data;
      this.error = parse.data.error;
      this.name = "SpeechmaticsResponseError";
    } else {
      throw new SpeechmaticsUnexpectedResponse(void 0, errorResponse);
    }
  }
}
const InternalErrorEnum = {
  ConfigurationError: "Configuration error",
  NetworkError: "Network error",
  UnsupportedEnvironment: "Unsupported environment",
  UnexpectedMessage: "Unexpected message",
  UnexpectedResponse: "Unexpected response",
  InvalidTypeError: "Invalid type error"
};
class SpeechmaticsInternalError extends Error {
  // e.g. a caught error or response
  constructor(error, message, cause) {
    super(message ?? error);
    this.name = "SpeechmaticsInternalError";
    this.error = error;
    this.cause = cause;
  }
}
class SpeechmaticsConfigurationError extends SpeechmaticsInternalError {
  constructor(message) {
    super(InternalErrorEnum.ConfigurationError, message);
    this.name = "SpeechmaticsConfigurationError";
  }
}
class SpeechmaticsNetworkError extends SpeechmaticsInternalError {
  constructor(message, cause) {
    super(InternalErrorEnum.NetworkError, message, cause);
    this.name = "SpeechmaticsNetworkError";
  }
}
class SpeechmaticsUnsupportedEnvironment extends SpeechmaticsInternalError {
  constructor(message) {
    super(InternalErrorEnum.UnsupportedEnvironment, message);
    this.name = "SpeechmaticsUnsupportedEnvironment";
  }
}
class SpeechmaticsUnexpectedMessage extends SpeechmaticsInternalError {
  constructor(message) {
    super(InternalErrorEnum.UnexpectedMessage, message);
    this.name = "SpeechmaticsUnexpectedMessage";
  }
}
class SpeechmaticsUnexpectedResponse extends SpeechmaticsInternalError {
  constructor(message, response) {
    super(InternalErrorEnum.UnexpectedResponse, message, response);
    this.name = "SpeechmaticsUnexpectedResponse";
  }
}
class SpeechmaticsInvalidTypeError extends SpeechmaticsInternalError {
  constructor(message, cause) {
    super(InternalErrorEnum.InvalidTypeError, message, cause);
    this.name = "SpeechmaticsInvalidTypeError";
  }
}
//# sourceMappingURL=errors.js.map
