"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var auth_exports = {};
__export(auth_exports, {
  default: () => getShortLivedToken
});
module.exports = __toCommonJS(auth_exports);
var import_errors = require("../utils/errors");
var import_request = require("../utils/request");
async function getShortLivedToken(type, apiKey, mpApiUrl, ttl) {
  if (typeof window !== "undefined") {
    console.warn(
      "Requesting a short lived token from a browser is not recommended.     More info at https://github.com/speechmatics/speechmatics-js#readme"
    );
  }
  const jsonResponse = await (0, import_request.request)(
    apiKey,
    mpApiUrl,
    `v1/api_keys?type=${type}`,
    "POST",
    JSON.stringify({
      ttl: ttl || 60
    }),
    void 0,
    "application/json"
  ).catch((err) => {
    throw new import_errors.SpeechmaticsNetworkError("Error fetching short lived token", err);
  });
  return jsonResponse.key_value;
}
//# sourceMappingURL=auth.js.map
