"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var error_response_exports = {};
__export(error_response_exports, {
  ErrorResponseErrorEnum: () => ErrorResponseErrorEnum
});
module.exports = __toCommonJS(error_response_exports);
const ErrorResponseErrorEnum = {
  BadRequest: "Bad Request",
  FileExpired: "File Expired",
  Forbidden: "Forbidden",
  ResourceLocked: "Resource Locked",
  FormatNotSupported: "Format Not Supported",
  InternalServerError: "Internal Server Error",
  JobError: "Job error",
  JobExpired: "Job Expired",
  JobInProgress: "Job In Progress",
  JobIsNotOfTypeAlignment: "Job is not of type alignment",
  JobIsNotOfTypeTranscription: "Job is not of type transcription",
  JobNotFound: "Job not found",
  JobRejected: "Job rejected",
  JobRejectedDueToInvalidAudio: "Job rejected due to invalid audio",
  JobRejectedDueToInvalidText: "Job rejected due to invalid text",
  MalformedRequest: "Malformed request",
  MissingCallback: "Missing callback",
  MissingDataFile: "Missing data_file",
  MissingTextFile: "Missing text_file",
  NoLanguageSelected: "No language selected",
  NotImplemented: "Not Implemented",
  PermissionDenied: "Permission Denied",
  RequestedProductNotAvailable: "Requested product not available",
  TranscriptionNotReady: "Transcription not ready",
  LogFileNotAvailable: "Log file not available",
  RequestedEarlyAccessReleaseNotAvailable: "Requested Early Access Release not available",
  UnprocessableEntity: "Unprocessable Entity"
};
//# sourceMappingURL=error-response.js.map
