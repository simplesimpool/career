import { ErrorResponse, ErrorResponseErrorEnum } from '../types';
type SpeechamticsErrorEnum = InternalErrorEnum | ErrorResponseErrorEnum;
interface SpeechmaticsErrorInterface extends Error {
  error: SpeechamticsErrorEnum;
}
export declare class SpeechmaticsResponseError
  extends Error
  implements SpeechmaticsErrorInterface
{
  response: ErrorResponse;
  error: ErrorResponseErrorEnum;
  constructor(errorResponse: ErrorResponse | unknown);
}
export declare const InternalErrorEnum: {
  readonly ConfigurationError: 'Configuration error';
  readonly NetworkError: 'Network error';
  readonly UnsupportedEnvironment: 'Unsupported environment';
  readonly UnexpectedMessage: 'Unexpected message';
  readonly UnexpectedResponse: 'Unexpected response';
  readonly InvalidTypeError: 'Invalid type error';
};
export type InternalErrorEnum =
  typeof InternalErrorEnum[keyof typeof InternalErrorEnum];
declare class SpeechmaticsInternalError extends Error {
  error: InternalErrorEnum;
  cause?: unknown;
  constructor(error: InternalErrorEnum, message?: string, cause?: unknown);
}
export declare class SpeechmaticsConfigurationError extends SpeechmaticsInternalError {
  constructor(message?: string);
}
export declare class SpeechmaticsNetworkError extends SpeechmaticsInternalError {
  constructor(message?: string, cause?: unknown);
}
export declare class SpeechmaticsUnsupportedEnvironment extends SpeechmaticsInternalError {
  constructor(message?: string);
}
export declare class SpeechmaticsUnexpectedMessage extends SpeechmaticsInternalError {
  constructor(message?: string);
}
export declare class SpeechmaticsUnexpectedResponse extends SpeechmaticsInternalError {
  constructor(message?: string, response?: unknown);
}
export declare class SpeechmaticsInvalidTypeError extends SpeechmaticsInternalError {
  constructor(message?: string, cause?: unknown);
}
export type SpeechmaticsError =
  | SpeechmaticsInternalError
  | SpeechmaticsResponseError;
export {};
